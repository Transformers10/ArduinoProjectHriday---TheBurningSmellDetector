//CODE
#include <CuteBuzzerSounds.h>
#include <Sounds.h>

#include <Wire.h>
#include <SPI.h>
#include <Adafruit_Sensor.h>
#include "Adafruit_BME680.h"
#include <SparkFun_Qwiic_OLED.h> 

#define BME_SCK 13
#define BME_MISO 12
#define BME_MOSI 11
#define BME_CS 10
#define BUZZER_PIN 15


#define SEALEVELPRESSURE_HPA (1013.25)
QwiicMicroOLED myOLED;

Adafruit_BME680 bme; // I2C
float record_values[10];
//Adafruit_BME680 bme(BME_CS); // hardware SPI
//Adafruit_BME680 bme(BME_CS, BME_MOSI, BME_MISO,  BME_SCK);

void setup() {
  Serial.begin(115200);
    cute.init(BUZZER_PIN);
  while (!Serial);
  Serial.println(F("BME680 test"));
  bme.begin();

  if (!bme.begin()) {
    Serial.println("Could not find a valid BME680 sensor, check wiring!");
    while (1);
  }
 // if (myOLED.begin() == false)
  //  {
      //  Serial.println("Device begin failed. Freezing...");
      //  while (true)
            ;
 //   }
   // Serial.println();//"Begin success");

  // Set up oversampling and filter initialization
  bme.setTemperatureOversampling(BME680_OS_8X);
  bme.setHumidityOversampling(BME680_OS_2X);
  bme.setPressureOversampling(BME680_OS_4X);
  bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
  bme.setGasHeater(320, 150); // 320*C for 150 ms
  
 
}

void loop() {
 String msg1 = "GET OUT OF HOUSE NOW";
String msg2 = "SAFE ENVIORMENT";
String msg3 = "HighTemp";   //Messages sent to OLED from bme readings
String msg4 = "LowResistance";


 int x0 = (myOLED.getWidth() - myOLED.getStringWidth(msg1)) / 2;

    // starting y position - screen height minus string height / 2 
    int y0 = (myOLED.getHeight() - myOLED.getStringHeight(msg1)) / 2;
    int x1 = (myOLED.getWidth() - myOLED.getStringWidth(msg2)) / 2;

    
    int y1 = (myOLED.getHeight() - myOLED.getStringHeight(msg2)) / 2;
  //  int x2 = (myOLED.getWidth() - myOLED.getStringWidth(msg3)) / 2;

   
  //  int y2 = (myOLED.getHeight() - myOLED.getStringHeight(msg3)) / 2;
  //  int x3 = (myOLED.getWidth() - myOLED.getStringWidth(msg4)) / 2;

   
   // int y3 = (myOLED.getHeight() - myOLED.getStringHeight(msg4)) / 2;
  if (! bme.performReading()) {
    Serial.println("Failed to perform reading :(");
    return;
  }
  Serial.print("Temperature Reading = ");
  Serial.print(bme.temperature);
  Serial.println(" *C");

  //Serial.print("Pressure = ");
 // Serial.print(bme.pressure / 100.0);
 // Serial.println(" hPa");

  //Serial.print("Humidity = ");
  //Serial.print(bme.humidity);
  //Serial.println(" %");
  
  Serial.print("Gas Reading = ");
  Serial.print(bme.gas_resistance / 1000.0);
  //Serial.println(" KOhms");

  
  

 // Serial.print("Approx. Altitude = ");
 // Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
 // Serial.println(" m");

 // Serial.println();
  if ((bme.gas_resistance / 1000.0 <= 50) && (bme.temperature >= 30.5)){ //64
    Serial.print("BURNING SMELL DETECTED");
    cute.play(S_HAPPY);
    myOLED.text(x0, y0, msg1, 0);

  }
 //  if  ((bme.gas_resistance / 1000.0  >= 52) && (bme.temperature  >= 30.5)); {//64
  //  Serial.print("HighTemp");
   // myOLED.text(x0, y0, msg3, 0); //x2,y2
//
///  }
 //  if  ((bme.gas_resistance / 1000.0  <= 52) && (bme.temperature  <= 30.5)); {//64      THESE two lines are OLED variant messages incase one or the other values are picked up
   // Serial.print("LowGasResistance");
  //  myOLED.text(x0, y0, msg4, 0);//x3,y3

 // }
  

  
  if ((bme.gas_resistance / 1000.0 >= 50) && (bme.temperature <= 30.5)); { //64
    Serial.print("SAFE ENVIORMENT");
    myOLED.text(x1, y1, msg2, 0);//x1,y1

  }
    Serial.println();
    myOLED.println();
  delay(2000);

  
 
}
